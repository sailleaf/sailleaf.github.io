<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown语法使用姿势]]></title>
    <url>%2F2017%2F06%2F14%2FMarkdown%E8%AF%AD%E6%B3%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%2F</url>
    <content type="text"><![CDATA[此文目的是Markdown手册，初见可以是路过或学习，也可以因查阅而再见。其主要内容是介绍Markdown语法特性。通过时常写作、练习，你完全可以写出一篇形意具佳的Markdown格式的文章，也希望有朝一日能能真正对说此文再见。 简介Markdown是一种轻量级『标记语言』，创始人为约翰·格鲁伯(John Gruber)，与『超文本标记语言』HTML义似，常用于辅助Writing，它允许人们使用易读易写的纯文本格式编写文档，通过脚本引擎将.md文件转化为.html文件或直接解析，显示在你眼前屏幕。 相比于HTML，Markdown以简练有效的标记语法诠释内容，在Geeks中大行其道，它具备以下特点： 它基于纯文本，方便修改和共享； 几乎可以在所有的文本编辑器中编写； 有众多编程语言的实现，以及应用的相关扩展； 在 GitHub 等网站中有很好的应用； 很容易转换为 HTML 文档或其他格式； 适合用来编写文档、记录笔记、撰写文章。 下面以完成一个简单的 Hello.md 页面为示例，作为远方的第一步。首先打开你熟悉的文本编辑器，建议使用 Markdown 相关的编辑器 (如：Sublime Text) ，新建一个 Hello.md 文件，写入下面的内容，并保存： 1234Hello.md======== Hello [Markdown](http://wowubuntu.com/markdown/)! .md 和 .markdown 都是被普遍支持的扩展名，不过 .md 更加简单和方便。它转换为 HTML 文档后，应该和 Hello.md 差不多。 Hello.md 的显示结果如下： Hello.mdHello Markdown! 基本语法段落与换行段落是由一个或多个连续的行构成，段落间靠一个或以上视觉上的空行划分。空行指的是行内什么都没有或只有空白符。 Markdown语法 123[&gt;_&lt;]: 前面是注释符号哈，这是段落前的空行，这是空行！空行！！行！！！这是一段落，它有若干内容，比如。。。再如。。。最后。。。[^_^]: 前面还是注释符号，这是段落后的空行，这是空行！空行！！行！！！ 显示结果 这是一段落，它有若干内容，比如。。。再如。。。最后。。。 相邻两行文本，如果中间没有空行会显示在一行中（换行符被转换为空格），一般的段落不应该用空格或制表符缩进。 换行就是换一行继续显示，内容依旧属于同一段落但内容可在多行显示（我知道你懂）。在Markdown中直接对文本换行会被过滤为空格符显示，换行方法有以下两种： Markdown换行语法1： 在换行处连续敲两次以上的空格键，再按回车键 12这是第一行内容，行末有两个空格。 这是按回车键后的第二行内容。 显示结果 这是第一行内容，行末有两个空格。这是按回车键后的第二行内容。 Markdown换行语法2： 在换行处键入&lt;br&gt;; 1第一句内容。&lt;br&gt;第二句内容。 显示结果 第一句内容。第二句内容。 对于一行足够长的文本，最终显示结果会因浏览器显示空间情况自动换行 标题Markdown 支持两种标题的语法， Setext 形式和 Atx 形式。 Setext形式Setext形式是用底线的形式，利用 =（最高阶标题）和 -（次高阶标题）。 Markdown语法 1234最高阶标题==========次高阶标题---------- 显示结果 最高阶标题次高阶标题 = 和 - 的数量是没有限制的，通常的做法是使其和标题文本的长度相同，这样看起来比较舒服。Setext形式只支持最高阶标题、次高阶标题两种格式标题。 Atx 形式Atx 形式通过 # 号数量表示标题大小，行首有多少个 # 号表示多少级标题。 Markdown语法 1234567# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题####### 没有七级标题 显示结果 一级标题二级标题三级标题四级标题五级标题六级标题####### 没有七级标题 # 号左右紧接空格符会因不同Markdown实现而有不同的结果，常见是被过滤忽略。超过六个 # 号，会被显示出来。 引用在段落或其他内容前使用 &gt; 符号，就可以将这段内容标记为 ‘引用’ 的内容（&lt;blockquote&gt;），用法如下： Markdown语法 12345&gt; 引用内容&gt;&gt;&gt; 引用中的引用内容&gt;&gt; 在引用中可使用其他__任何__ `Markdown` 语法 显示结果 引用内容 引用中的引用内容 在引用中可使用其他任何 Markdown 语法 强调① 使用 * * 或 _ _ 包括的文本会被转换为 &lt;em&gt;&lt;/em&gt; ，通常表现为斜体： Markdown语法 1去去去斜体： *去去去* ，Go Go Go斜体： _Go Go Go_ 显示结果 去去去斜体： 去去去 ，Go Go Go斜体： Go Go Go ② 使用 ** ** 或 __ __ 包括的文本会被转换为&lt;strong&gt;&lt;/strong&gt; ，通常表现为加粗： Markdown语法 1来来来加粗： **来来来** ，Come Come Come加粗： __Come Come Come__ 显示结果 来来来加粗： 来来来 ，Come Come Come加粗： Come Come Come ③ 用来包括文本的 * 或 _ 的内侧边界建议不要留空白，否则会因不同的Markdown实现表现异常： Markdown语法 1喜喜： ** 喜喜** ； he he： __ he he __ Hexo结果 喜喜： 喜喜 ； he he： he he ④ 如需在文本中显示单个或成对的 * 、 ** 、 _ 、 __，转义规则如下： Markdown语法 1234显示一个 \* 号，需要转义 显示一个下划线 _，不需要转义 显示成对星号： \**，需要转义 显示成对下划线： \__，需要转义 显示结果 显示一个 * 号，需要转义显示一个下划线 _，不需要转义显示成对星号： **，需要转义显示成对下划线： __，需要转义 ⑤ 给文本加入斜体或加粗的效果中，*、**、_ 、 __ 都必须成对使用。 列表无序列表无序列表使用星号 * 、加号 + 、减号 - 作为列表项Item的标记，用法如下： Markdown语法 123* 该列表处的Item使用 `*` 作为标记 + 该列表处的Item使用 `+` 作为标记 - 该列表处的Item使用 `-` 作为标记 显示结果 该列表处的Item使用 * 作为标记 该列表处的Item使用 + 作为标记 该列表处的Item使用 - 作为标记 有序列表有序列表以数字 + . + 空格 开始，用法如下： Markdown语法 1231. 有序列表以数字和 `.` 开始 3. 数字的序列并不会影响生成的列表序列 4. 但仍然推荐按照自然顺序（1.2.3...）编写 显示结果 有序列表以数字和 . 开始 数字的序列并不会影响生成的列表序列 但仍然推荐按照自然顺序（1.2.3…）编写 嵌套的列表列表可以加入无序或有序的列表项，组成嵌套的列表项，用法如下： Markdown语法 123456781. 一层标题1 * 二层无序标题1 + 二层无序标题2 - 二层无序标题32. 一层标题2（无序和有序列表可随意嵌套） 1. 二层有序标题1 2. 二层有序标题2 3. 二层有序标题3 显示结果 一层标题1 二层无序标题1 二层无序标题2 二层无序标题3 一层标题2（无序和有序列表可随意嵌套） 二层有序标题1 二层有序标题2 二层有序标题3 注意点列表项的用法需要注意的要点有如下： 无序列表项的开始是：符号 + 空格； 有序列表项的开始是：数字 + . + 空格； 空格 数量至少为一个，多个 空格 将被解析为一个； 如果仅需要在行前显示数字 和 . ，即可取消显示为列表。另一种方法 Markdown语法1： 在 . 前加入转义符号 \ 105\. 列表项内容 显示结果 05. 列表项内容 Markdown语法2： 在行首加入自动连字符 &amp;shy; 或 &amp;#173; 12&amp;shy;05. 列表项内容&amp;#173;05. 列表项内容 显示结果 &shy;05. 列表项内容&#173;05. 列表项内容 分割线① 在一段落（前后有视觉上的空行）中使用三个或更多的 * 、 - 、 _ 、&lt;hr&gt;来添加分隔线： Markdown语法 1234567***-------___________&lt;hr&gt; 显示结果 ② 多个字符之间可以有空格（空白符），但不能有其他字符： Markdown语法 12345* * * *-~- - -_^__ _ 显示结果 -~- - - ^__ 超链接超链接的语法格式有三种：行内式、参考式、自动链接。 行内式行内式格式为： [link text](url &#39;title text&#39;)。有三种兼容的超链接格式： ① 标准行内式格式，文本使用 &#39; 或 &quot; 括起来均可。 Markdown语法 1[Yee.YY](https://yeeyy.me "Yee.YY") 显示结果 Yee.YY ② 简化链接，鼠标停留不显示文本。 Markdown语法 1[Yee.YY](https://yeeyy.me) 显示结果 Yee.YY ③ 指向本地文件的链接。 Markdown语法 1[avatar.png](./uploads/avatar.png) 显示结果 avatar.png 参考式参考式链接的写法相当于行内式拆分成两部分，并通过一个识别符来连接两部分。参考式能尽量保持文章结构的简单，也方便统一管理 url 。 首先，定义链接标识符，格式为：[链接文本][标识符] ；然后，定义链接内容，格式为：[标识符]: url &#39;title&#39; 。 12[Wikipedia][wikipedia_id][wikipedia_id]: https://www.wikipedia.org/ 'Wikipedia' 另一种写法是省略标识符，使用链接文本作为标识符： 12[Wikipedia][][Wikipedia]: https://www.wikipedia.org 'Wikipedia' 显示结果 Wikipedia Wikipedia 其中，title 也可以使用() 包括（考虑到兼容性，建议使用引号）；标识符可以是字母、数字、空白或标点符号，不区分大小写；链接内容的定义可以放在同一个文件的任意位置； 参考式相对于行内式有一个明显的优点，就是可以在多个不同的位置引用同一个 url 。 自动链接使用 &lt;&gt; 包括的 url 或E-mail地址会被自动转换为超链接： Markdown语法 12&lt;https://yeeyy.me&gt; &lt;fall@yeeyy.me&gt; 显示结果https://yeeyy.me&#x66;&#x61;&#108;&#x6c;&#x40;&#121;&#101;&#x65;&#x79;&#x79;&#46;&#109;&#x65; 该方式适合行内较短的链接，使用 url 作为链接文字。 E-mail 会自动编码，以逃避抓取机器人。另外注意的是，这种链接方式在Hexo环境上不会在新的标签页打开链接，而是在当前页转到新链接。 图片插入图片的语法和插入超链接的语法基本一致，只是在最前面多一个 ! ，也分为行内式和参考式两种。 行内式 Markdown语法 1![avatar](http://orh8ki6p9.bkt.clouddn.com/head_show/avatar_s.png "avatar") 显示结果 方括号中的部分是图片的替代文本，括号中的 title 部分和链接一样，是可选的。 参考式 Markdown语法 12![avatar][show_id] [show_id]: http://orh8ki6p9.bkt.clouddn.com/head_show/avatar_s.png "avatar" 显示结果 指定图片的显示大小Markdown 不支持指定图片的显示大小，不过可以通过直接插入&lt;img /&gt;标签来指定相关属性： Markdown语法 1&lt;img src="http://orh8ki6p9.bkt.clouddn.com/head_show/avatar_s.png" alt="avatar" title="avatar" width="80" height="80" /&gt; 显示结果 代码行内代码通过反引号： ` ，插入行内代码（` 是 Tab 键上边、数字 1 键左侧的那个按键） Markdown语法 1`Markdown` 显示结果Markdown 代码块方法一，选中目标代码块，按 Tab 键即可。 Markdown语法 1234 for(int i = 1; i &lt;= 10; i++)&#123; print("s");&#125; 显示结果 for(int i = 1; i &lt;= 10; i++){ print(&quot;s&quot;); } 代码块前需要有至少一个空行，且每行代码前需要有至少一个 Tab 或四个空格，按 Shift + Tab 键则取消缩进 Tab 操作。 方法二，对于大段代码框：在你的代码块的前面和后面都加上三个反引号 ` 即可，在第一行后指定编程语言，也可以不指定。 Markdown语法1234567891011```javapublic class Client &#123; public static void main(String[] args)&#123; int sum = 0; for(int i = 1; i &lt;= 100; i++)&#123; sum++; &#125; println(&quot;sum = &quot; + sum); &#125; &#125; ``` 12345```javascriptwindow.addEventListener(&apos;load&apos;, function() &#123; console.log(&apos;window loaded&apos;);&#125;);``` 显示结果123456789public class Client &#123; public static void main(String[] args)&#123; int sum = 0; for(int i = 1; i &lt;= 100; i++)&#123; sum++; &#125; println("sum = " + sum); &#125; &#125; 123window.addEventListener('load', function() &#123; console.log('window loaded');&#125;); 转换规则代码块中的文本（包括 Markdown 语法）都会显示为原始内容，而特殊字符会被转换为 HTML 字符实体。 转义字符 Markdown语法 123456789101112\\ 反斜杠 \` 反引号 \* 星号 \_ 下划线 \&#123;\&#125; 大括号 \[\] 中括号 \(\) 小括号 \# 井号 \+ 加号 \- 减号 \. 英文句号 \! 感叹号 显示结果\ 反斜杠` 反引号* 星号_ 下划线{} 大括号[] 中括号() 小括号# 井号+ 加号- 减号. 英文句号! 感叹号 扩展语法Markdown 标准 本身所包含的功能有限，所以产生了许多第三方的扩展语法，如 GitHub Flavored Markdown。 这里只介绍众多扩展语法中的一部分内容，它们在不同平台或工具的支持程度不同，请参考具体平台或工具的文档和说明来使用。 删除线在目标内容前后各加上两个波浪号~~ ，即可添加删除线 Markdown语法 1234这是 ~~删除内容~~ 这是 ~~多行删除内容~~ 显示结果这是 删除内容。 这是 多行删除内容。 表格单元格和表头使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行： Markdown语法 1234name | age---- | ---LearnShare | 12Mike | 32 显示结果 name age LearnShare 12 Mike 32 为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 | 来标记单元格边界： Markdown语法 1234| name | age || ---------- | --- || LearnShare | 12 || Mike | 32 | 显示结果 name age LearnShare 12 Mike 32 为了使 Markdown 更清晰，| 和 - 两侧需要至少有一个空格（最左侧和最右侧的 | 外就不需要了）。 对齐在表头下方的分隔线标记中加入冒号 : ，即可标记下方单元格内容的对齐方式： :— 代表左对齐 :–: 代表居中对齐 —: 代表右对齐 Markdown语法 1234| left | center | right || :--- | :----: | ----: || aaaa | bbbbbb | ccccc || a | b | c | 显示结果 left center right aaaa bbbbbb ccccc a b c 如果不使用对齐标记，单元格中的内容默认左对齐；表头单元格中的内容会一直居中对齐（不同的实现可能会有不同表现）。 插入其他内容表格中可以插入其他 Markdown 中的行内标记： Markdown语法 1234| name | age | blog || ------------ | --- | ------------------------------- || _LearnShare_ | 12 | [LearnShare](http://xianbai.me) || __Mike__ | 32 | [Mike](http://mike.me) | 显示结果 name age blog LearnShare 12 LearnShare Mike 32 Mike Task ListHexo不支持这个特性，可以通过HTML标签达到同样的效果。 Markdown语法 123456- [ ] Eat- [x] Code - [x] HTML - [x] CSS - [x] JavaScript- [ ] Sleep HTML语法 1&lt;input type='checkbox' onclick='return true;' checked&gt; Mercury 显示结果不支持Task List特性 [ ] Eat [x] Code [x] HTML [x] CSS [x] JavaScript [ ] Sleep HTML标签 Mercury Venus Earth (Orbit/Moon) 常用符号Markdown对空白符进行特别处理，连续的多个空格只会在页面上显示一个空格，需通过特别定义符号来表示空白符，有三种常用的符号如下。 123最小空白格 &amp;nbsp; 或 &amp;#160; 示例：—- —- —- 键盘空格大小半角空白符 &amp;ensp; 或 &amp;#8194; 示例：—- –A– —- 一个字母大小全角空白符 &amp;emsp; 或 &amp;#8195; 示例：—- –字– —- 一个汉字大小 注释123[^_^]: Markdown注释内容1[&gt;_&lt;]: Markdown注释内容2[&gt;_&gt;]: Markdown注释内容3 Markdown编辑器这部分给大家介绍一些可以用来书写、编辑 Markdown 的工具，包括独立客户端、编辑器、 IDE 插件，以及基于 Web 的工具等，排名不分先后。 也欢迎你来推荐自己喜欢的工具和插件。 MarkdownPad Windows Texts Windows OSX MarkPad Windows MdCharm Windows Linux Markdown Edit Windows CuteMarkEd Windows Linux Haroopad Windows OSX Linux Mou OSX MacDown OSX Markdown Pro OSX ReText Linux sublime-markdown-extended Sublime Text Atom Markdown Preview Atom IDEA Markdown IDEA Cmd Markdown Windows OSX Linux Web StackEdit Web Dillinger Web]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Writring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[入场不易，终点难觅]]></title>
    <url>%2F2017%2F05%2F20%2F%E5%85%A5%E5%9C%BA%E4%B8%8D%E6%98%93%EF%BC%8C%E7%BB%88%E7%82%B9%E9%9A%BE%E8%A7%85%2F</url>
    <content type="text"><![CDATA[说点话，即使不善言辞。记点事，不然一会就褪去。 认知(Cognition)，是一种个体思维进行信息处理的心理功能。而认知方法则是达到这一目的而采取的有效手段。 在知识领域的认知方法应随人的成长阶段而有所不同，从求知阶段的预习、听课、练习再复习，到自知阶段的阅读、理解、实践再总结。处于职业生涯的我们应该认识到：认知方法论中的见与解是攀登的天梯，重要的思与记是赏云卷云舒的霄阁。 看不懂没关系，就写一遍，还是不懂？那就写两遍。看中求解，写中带思，思定出解。 我的台灯会亮到很晚，是照亮屏前的码字，更是暖起心中风雨路。]]></content>
      <categories>
        <category>歪歪</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
</search>